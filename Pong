#Pong 

import simplegui 
import random 

#initialize globals 
width = 600
height = 400
ball_pos = [width/2, height/2] 
ball_vel = [2, 3]
ball_radius = 15
pad_width = 8
pad_height = 80
half_pad_width = pad_width / 2
half_pad_height = pad_height / 2 
#vertical positions 
paddle1_pos = height / 2
paddle2_pos = height / 2
left = False 
right = True 
paddle1_vel = 0

paddle2_vel = 0
score1 = 0
score2 = 0

#initialize ball_position and ball_velocity for new ball in middle of the table

def spawn_ball(direction): 
    global ball_pos, ball_vel #these are vectors stored as lists
    #spawns a ball and assigns a fixed velocity 
    ball_pos = [width/2, height/2] 
    ball_vel = [0, 0]
    if direction == right: #ball should go upwards and to the right 
        ball_vel[0] = random.randrange(2, 3) 
        ball_vel[1] = - random.randrange(2, 3)
    elif direction == left: 
        ball_vel[0] = - random.randrange(2, 3) 
        ball_vel[1] = - random.randrange(2, 3) 
    elif direction == middle: 
        ball_vel[0] = 0
        ball_vel[1] = 0
        
#define event handlers 
def new_game(): 
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel #these are numbers
    global score1, score2 #these are ints 
    spawn_ball(left) 
    score1 = 0
    score2 = 0
    

def draw_handler(canvas): 
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel
    
    
    
    #draw midline and gutters 
    #canvas.draw_line(point1, point2, line_width, line_color)
    canvas.draw_line([width/2, 0], [width/2, height], 1, "white")
    canvas.draw_line([pad_width, 0], [pad_width, height], 1, "white")
    canvas.draw_line([width - pad_width, 0], [width - pad_width, height], 1, "white")
    
    #update ball 
    
    
    #draw ball 
    canvas.draw_circle(ball_pos, ball_radius, 5, "white", "white")
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1] 
    
    #ball collision 
    if ball_pos[1] >= height - ball_radius: 
        ball_vel[1] = - ball_vel[1] 
    elif ball_pos[1] <= ball_radius: 
        ball_vel[1] = - ball_vel[1]

    
    #update paddle's vertical position, keep paddle on the screen 
    paddle1_pos += paddle1_vel
    paddle2_pos += paddle2_vel 
    if paddle1_pos <= 0 + half_pad_height or paddle1_pos >= height - half_pad_height:
        #paddle1_pos += paddle1_vel 
        paddle1_vel = 0
        
    if paddle2_pos <= 0 + half_pad_height or paddle2_pos >= height - half_pad_height: 
        paddle2_vel = 0
        
    
    #draw paddles 
    #canvas.draw_polygon(point_list, line_width, line_color, fill_color = color)
    #canvas.draw_polygon([[0, pad_height
    canvas.draw_polygon([[0, paddle1_pos - half_pad_height], 
                         [0, paddle1_pos + half_pad_height], 
                         [pad_width, paddle1_pos + half_pad_height], 
                         [pad_width, paddle1_pos - half_pad_height]], 1, "white", "white")
    
    canvas.draw_polygon([[width, paddle2_pos - half_pad_height],
                        [width, paddle2_pos + half_pad_height],
                        [width - pad_width, paddle2_pos + half_pad_height],
                        [width - pad_width, paddle2_pos - half_pad_height]], 1, "white", "white")
    
    #determine whether paddle and ball collide 
    #collision with left paddle
    if ball_pos[0] <= ball_radius + pad_width and (ball_pos[1] <= paddle1_pos + half_pad_height and 
                                                   ball_pos[1] >= paddle1_pos - half_pad_height): 
        ball_vel[0] = -1.3 * ball_vel[0]
        
        
    elif ball_pos[0] <= ball_radius + pad_width : #ball goes off left side
        spawn_ball(right) 
        score2 += 1 
   
    #collision with right paddle 
    elif ball_pos[0] >= (width - ball_radius) - pad_width and (ball_pos[1] <= paddle2_pos + half_pad_height and 
                                                               ball_pos[1] >= paddle2_pos - half_pad_height):
        ball_vel[0] = -1.3 * ball_vel[0]
        
        
    elif ball_pos[0] >= width - pad_width - ball_radius: #ball goes off the right side 
        spawn_ball(left) 
        score1 += 1 
    
        
    #draw scores 
    canvas.draw_text(str(score1), [width/2 - 50, 50], 50, "white", "monospace") 
    canvas.draw_text(str(score2), [width/2 + 20, 50], 50, "white", "monospace")
    
    if score1 == 5: 
        spawn_ball(left)
        canvas.draw_text("Player 1 wins!", [20, height/2 + 50], 20, "white", "monospace")
    elif score2 == 5: 
        spawn_ball(left)
        canvas.draw_text("Player 2 wins!", [20, height/2 + 50], 20, "white", "monospace")

    
def keydown(key): 
    global paddle1_vel, paddle2_vel, paddle1_pos, paddle1_slide_up, paddle1_slide_down
    if key == simplegui.KEY_MAP["w"]: 
        paddle1_vel = -4
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 4
    elif key == simplegui.KEY_MAP["up"]: 
        paddle2_vel = -2
    elif key == simplegui.KEY_MAP["down"]: 
        paddle2_vel = 2
    
    
def keyup(key): 
    global paddle1_vel, paddle2_vel, paddle1_slide_up, paddle1_slide_down 
    if key == simplegui.KEY_MAP["w"]:
        #paddle1_slide_up = 0
        #paddle1_vel = 0
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["s"]: 
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["up"]: 
        paddle2_vel = 0 
    elif key == simplegui.KEY_MAP["down"]: 
        paddle2_vel = 0 
    
def button_handler(): 
    new_game()
    
#Create Frame 
            
frame = simplegui.create_frame("Pong", width, height) 
frame.set_draw_handler(draw_handler) 
frame.set_keydown_handler(keydown) 
frame.set_keyup_handler(keyup) 
button1 = frame.add_button("New Game", button_handler) 

#Start Frame 
frame.start()
new_game() 
